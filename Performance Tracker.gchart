{
	"CHART":{
		"VERSION":"1",
		"VIEW":"home",
		"TYPE":"44",
		"PROPERTIES":{
			"title":"Performance Tracker ",
			"subtitle":" ",
			"widthFactor":"2",
			"heightFactor":"2",
			"style":"0",
			"resizable":"0",
			"script":"##\n## Python program will run on selection\n##\n## Author: Florian Lungu\n## Contact: florian@agourasoftware.com\n##\n## 06-Apr-2020 initial creation\n## 15-Apr-2020 bug fixes and enhancements\n## 17-Apr-2020 added hrTSS_field\n##\nimport numpy as np\nimport plotly\nimport plotly.graph_objs as go\nimport tempfile\nimport pathlib\nimport pandas as pd\nimport dateutil\nimport datetime\nfrom datetime import date, timedelta, datetime\n#import math #you only need this library if you use math.exp() for CTL\n\n# Title \nathlete = GC.athlete()\nathleteName = athlete['name']\nchartTitle = \"Performance Tracker: \" + athleteName\nchartSubTitle = \"Chart displaying maximum monthly value of: \"\n\n# Chart settings (ok to edit this)\nctlDays = 42\ntss_field = 'BikeStress'\nhrTSS_field = 'TRIMP_Zonal_Points'\ntimeRanges = 0, 1200, 600, 300, 60, 10, 1\nfieldNames = ['CTL', '20min Pwr', '10min Pwr', '5min Pwr', '1min Pwr', '10sec Pwr', '1sec Pwr']\ncolors = ['#ff46ac', '#ffa4fd', '#4389ff', '#3ab6ff', '#6688bd', '#a7b96d', 'greenyellow', '#50b329', '#de59da', '#b358ff']\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July','August', 'September', 'October', 'November', 'December']\n\n# Query data\nprint('py chart code start')\nfig = go.Figure()\nctlDates = []\nctlDateTimes = []\nctlVals = []\ntssVals = []\n\n# Query GC for season metrics or each time range\nfor i in range(len(fieldNames)):\n\tif fieldNames[i] == 'CTL':\n\t\tdataS = GC.seasonMetrics(compare=False)\n\t\tstartDate = dataS['date'][0]\n\t\tendDate = dataS['date'][-1]\n\n\t\t# Parse season metrics into all dates between first date and last day\n\t\twhile startDate < endDate:\t\n\t\t\ttssVals.append(0)\t\n\t\t\tctlVals.append(0)\n\t\t\tctlDates.append(startDate)\n\t\t\tdt = datetime.combine(startDate, datetime.min.time())\n\t\t\tctlDateTimes.append(dt)\n\t\t\tstartDate = startDate + timedelta(days=1)\n\t\t\n\t\t# Set the total TSS value for each day\n\t\tfor j in range(len(dataS['date'])):\n\t\t\tfor k in range(len(ctlDates)):\n\t\t\t\tif dataS['date'][j] == ctlDates[k]:\n\t\t\t\t\tif dataS[tss_field][j] == 0.0:\n\t\t\t\t\t\ttssVals[k] += dataS[hrTSS_field][j]\n\t\t\t\t\telse:\n\t\t\t\t\t\ttssVals[k] += dataS[tss_field][j]\n\n\t\t# Compute CTL\n\t\tctlY = 0\n\t\tfor k in range(len(ctlDates)):\n\t\t\t# Option 1: set CTL using formula [Today’s TSS * (1-e^(-1\/42)] + {Yesterday’s CTL * (e^(-1\/42)]\n\t\t\t# ctlVals[k] = tssVals[k]*(1-math.exp(-1\/ctlDays))+ctlY*math.exp(-1\/ctlDays)\n\t\t\t\t\t\n\t\t\t# Option 2: set CTL using formula Yesterday's CTL + (Today's TSS - Yesterday's CTL)\/Time Constant\n\t\t\tctlVals[k] = ctlY+(tssVals[k]-ctlY)\/ctlDays\n\t\t\tctlY = ctlVals[k]\n\t\t\t\n\t\tdataQ = {'datetime': ctlDateTimes, 'ctl': ctlVals} \n\t\t\t\t\n\telse:\n\t\tdataQ = GC.seasonPeaks(series=\"power\", duration=timeRanges[i])\n\t\n\t# Modify the data for charting\n\tdf = pd.DataFrame(dataQ)\n\tdf.columns = ['datetime','maxval']\n\tdf['maxval'] = df['maxval'].round(0)\n\tdf['maxval'] = df['maxval'].astype(int)\n\tdf['maxval'] = df['maxval'].replace({0:np.nan})\n\tdf.index = df['datetime'] \n\n\tdf['year'] = pd.DatetimeIndex(df['datetime']).year\n\tdf['month'] = pd.DatetimeIndex(df['datetime']).strftime('%B')\n\tdf['year'] = df['year'].astype(str)\n\tdf['month'] = df['month'].astype(str)\n\tdf['month_year'] = df['month'] + \" - \" + df['year']\n\n\t# Set monthly bests\n\tresultSet = df.resample('M').max()\n\tresultSet.set_index(['month_year'])\n\tdf_pivoted = resultSet.pivot(index='month', columns='year', values='maxval').reindex(months)\n\n\t# Create and style traces\n\ttColumns = df_pivoted.columns\n\trightColor = len(tColumns)-1-(len(colors)*int(len(tColumns)\/len(colors)))\n\tfor colName in reversed(tColumns):\n\t\tfig.add_trace(go.Scatter(visible=False, x=months, y=df_pivoted[colName], name=colName, line=dict(color=colors[rightColor], width=3)))\n\t\trightColor = rightColor-1\n\t\tif rightColor < 0:\n\t\t\trightColor = len(colors)-1\n\n# Make first trace group visible\nfor j in range(len(df_pivoted.columns)):\n\tfig.data[j].visible = True\n\n# Edit the layout\nfig.update_layout(title=chartTitle, xaxis_title='Month', yaxis_title='Watts', plot_bgcolor='#343434', paper_bgcolor='#343434', xaxis_gridcolor='rgba(0,0,0,0)', yaxis_gridcolor='#5e5e5e', font_color='white')\n\n# Create and add slider\nsteps = []\nfor i in range(len(fieldNames)):\n\tstep = dict(method=\"restyle\", args=[\"visible\", [False] * len(fig.data)], label=fieldNames[i])\n\tfor j in range(len(df_pivoted.columns)):\n\t\tstep[\"args\"][1][len(df_pivoted.columns)*i+j] = True\n\tsteps.append(step)\n\nsliders = [dict(active=0, currentvalue={\"prefix\": chartSubTitle}, pad={\"t\": 50}, steps=steps)]\nfig.update_layout(sliders=sliders)\n\n# Define temporary file\ntemp_file = tempfile.NamedTemporaryFile(mode=\"w+t\", prefix=\"GC_\", suffix=\".html\", delete=False)\n\n# Prepare plot\nplotly.offline.plot({\"data\": fig}, auto_open = False, filename=temp_file.name)\n\n# Load plot\nGC.webpage(pathlib.Path(temp_file.name).as_uri())\n\nprint('py chart code success') ",
			"state":" ",
			"showConsole":"0",
			"__LAST__":"1",
		}
	}
}