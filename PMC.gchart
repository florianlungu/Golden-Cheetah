{
	"CHART":{
		"VERSION":"1",
		"VIEW":"home",
		"TYPE":"44",
		"PROPERTIES":{
			"title":"PMC ",
			"subtitle":" ",
			"widthFactor":"2",
			"heightFactor":"2",
			"style":"0",
			"resizable":"0",
			"script":"##\n## Python program will run on selection\n##\n## Author: Florian Lungu\n## Contact: florian@agourasoftware.com\n##\n## 20-Apr-2020 initial creation\n## 07-Jan-2021 updated title\n##\nimport numpy as np\nimport plotly\nimport plotly.graph_objs as go\nimport tempfile\nimport pathlib\nimport pandas as pd\nimport dateutil\nimport datetime\nfrom datetime import date, timedelta, datetime\n# import math #you only need this library if you use math.exp() for CTL\n\n# Title \nathlete = GC.athlete()\nathleteName = athlete['name']\nchartTitle = athleteName\n\n# Chart settings (ok to edit this)\nctlDays = 42\natlDays = 7\npower_stress = 'BikeStress'\nhr_stress = 'TRIMP_Zonal_Points'\nshowColumns = ['CTL', 'ATL', 'TSB']\ncolors = ['#ff46ac', '#4389ff', '#ffa4fd']\n\n# Query data\nprint('py chart code start')\nfig = go.Figure()\nctlDates = []\nctlDateTimes = []\nctlVals = []\natlVals = []\ntssVals = []\nfilteredDates = []\nfilteredCTL = []\nfilteredATL = []\nfilteredTSB = []\n\n# Query GC for season metrics\ndataS = GC.seasonMetrics(all=True, compare=False)\nstartDate = dataS['date'][0]\nlastDif = date.today() - dataS['date'][-1]\nif lastDif.days < 7:\n\tendDate = dataS['date'][-1] + lastDif\nelse:\n\tendDate = dataS['date'][-1]\n\n# Parse season metrics into all dates between first date and last day\nwhile startDate <= endDate:\t\n\ttssVals.append(0)\t\n\tctlVals.append(0)\n\tatlVals.append(0)\n\tctlDates.append(startDate)\n\tdt = datetime.combine(startDate, datetime.min.time())\n\tctlDateTimes.append(dt)\n\tstartDate = startDate + timedelta(days=1)\n\t\t\n# Set the total TSS value for each day\nfor j in range(len(dataS['date'])):\n\tfor k in range(len(ctlDates)):\n\t\tif dataS['date'][j] == ctlDates[k]:\n\t\t\tif dataS[power_stress][j] == 0.0:\n\t\t\t\ttssVals[k] += dataS[hr_stress][j]\n\t\t\telse:\n\t\t\t\ttssVals[k] += dataS[power_stress][j]\n\n# Compute CTL & ATL\nctlY = 0\natlY = 0\nfor k in range(len(ctlDates)):\n\t# Option 1: set CTL using formula [Today’s TSS * (1-e^(-1\/42)] + {Yesterday’s CTL * (e^(-1\/42)]\n\t# ctlVals[k] = round(tssVals[k]*(1-math.exp(-1\/ctlDays))+ctlY*math.exp(-1\/ctlDays))\n\t\t\t\t\t\n\t# Option 2: set CTL using formula Yesterday's CTL + (Today's TSS - Yesterday's CTL)\/Time Constant\n\tctlVals[k] = ctlY+(tssVals[k]-ctlY)\/ctlDays\n\tatlVals[k] = atlY+(tssVals[k]-atlY)\/atlDays\n\tctlY = ctlVals[k]\n\tatlY = atlVals[k]\n\n# filter data\ndataFilter = GC.seasonMetrics(compare=False)\nlastDif = date.today() - dataFilter['date'][-1] \nif lastDif.days < 7:\n\tstartDate = dataFilter['date'][0] + lastDif\n\tendDate = dataFilter['date'][-1] + lastDif\nelse:\n\tstartDate = dataFilter['date'][0]\n\tendDate = dataFilter['date'][-1]\n\nfor k in range(len(ctlDates)):\n\tif ctlDates[k] >= startDate and ctlDates[k] <= endDate:\n\t\tfilteredDates.append(ctlDateTimes[k])\n\t\tfilteredCTL.append(round(ctlVals[k],0))\n\t\tfilteredATL.append(round(atlVals[k],0))\n\t\tif k == 0:\n\t\t\tfilteredTSB.append(0)\n\t\telse:\n\t\t\tfilteredTSB.append(round(ctlVals[k-1],0)-round(atlVals[k-1],0))\nrampRate = filteredCTL[-1] - filteredCTL[0]\nchartTitle += \": \" + endDate.strftime(\"%B %d, %Y\") + \"<br>CTL \" + str(int(filteredCTL[-1])) + \" — ATL \" + str(int(filteredATL[-1])) + \" — TSB \" + str(int(filteredTSB[-1]))\n\t\t\t\ndataQ = {'datetime': filteredDates, 'ctl': filteredCTL, 'atl': filteredATL, 'tsb': filteredTSB} \n\t\n# Modify the data for charting\ndf = pd.DataFrame(dataQ)\ndf.columns = ['datetime', 'CTL', 'ATL', 'TSB']\ndf.index = df['datetime'] \n\n# Create and style traces\nfor k in range(len(showColumns)):\n\tfig.add_trace(go.Scatter(visible=True, x=filteredDates, y=df[showColumns[k]], name=showColumns[k], line=dict(color=colors[k], width=1)))\n\t\n# Edit the layout\nfig.update_layout(title=chartTitle, xaxis_title='Date', yaxis_title='Points', plot_bgcolor='#343434', paper_bgcolor='#343434', xaxis_gridcolor='rgba(0,0,0,0)', yaxis_gridcolor='#5e5e5e', font_color='white', hovermode='x')\n\n# Define temporary file\ntemp_file = tempfile.NamedTemporaryFile(mode=\"w+t\", prefix=\"GC_\", suffix=\".html\", delete=False)\n\n# Prepare plot\nplotly.offline.plot({\"data\": fig}, auto_open = False, filename=temp_file.name)\n\n# Load plot\nGC.webpage(pathlib.Path(temp_file.name).as_uri())\n\nprint('py chart code success') ",
			"state":" ",
			"showConsole":"0",
			"__LAST__":"1",
		}
	}
}